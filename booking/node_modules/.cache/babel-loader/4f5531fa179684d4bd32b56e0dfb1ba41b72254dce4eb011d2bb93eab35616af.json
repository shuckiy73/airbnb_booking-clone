{"ast":null,"code":"var _jsxFileName = \"K:\\\\Booking2\\\\airbnb_booking-clone\\\\booking\\\\src\\\\Components\\\\Authorization\\\\LoginPage.jsx\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useState } from \"react\";\n// import { Link, useNavigate } from \"react-router-dom\";\n\n// function LoginPage() {\n//   const API_LOGIN = \"http://127.0.0.1:8000/api/v1/auth/token/login/\"; // API для авторизации\n//   const navigate = useNavigate(); // Хук для навигации\n//   const [validated, setValidated] = useState(false); // Состояние для валидации формы\n//   const [error, setError] = useState(\"\"); // Состояние для отображения ошибок\n\n//   // Если пользователь уже авторизован, перенаправляем его назад\n//   useEffect(() => {\n//     if (sessionStorage.getItem(\"auth_token\")) {\n//       navigate(-1);\n//     }\n//   }, [navigate]);\n\n//   // Функция для авторизации пользователя\n//   const auth = async (username, password) => {\n//     try {\n//       const response = await fetch(API_LOGIN, {\n//         method: \"POST\",\n//         headers: {\n//           \"Content-Type\": \"application/json\",\n//           Accept: \"*/*\",\n//         },\n//         body: JSON.stringify({ username, password }),\n//       });\n\n//       if (response.ok) {\n//         const token = await response.json();\n//         sessionStorage.setItem(\"auth_token\", JSON.stringify(token)); // Сохраняем токен в sessionStorage\n//         navigate(-1); // Перенаправляем пользователя назад после успешной авторизации\n//       } else {\n//         const errorData = await response.json();\n//         setError(errorData.error || \"Ошибка при авторизации\"); // Отображаем ошибку\n//       }\n//     } catch (err) {\n//       setError(\"Произошла ошибка при подключении к серверу\"); // Обработка ошибок сети\n//     }\n//   };\n\n//   // Обработчик отправки формы\n//   const handleSubmit = async (event) => {\n//     event.preventDefault();\n//     const form = event.currentTarget;\n\n//     if (form.checkValidity()) {\n//       const username = document.getElementById(\"login\").value;\n//       const password = document.getElementById(\"password\").value;\n//       await auth(username, password); // Вызываем функцию авторизации\n//     } else {\n//       event.stopPropagation(); // Останавливаем всплытие события, если форма невалидна\n//     }\n\n//     setValidated(true); // Устанавливаем состояние валидации\n//     form.classList.add(\"was-validated\"); // Добавляем класс для отображения ошибок\n//   };\n\n//   return (\n//     <section className=\"h-100\">\n//       <div className=\"container h-100\">\n//         <div className=\"row justify-content-sm-center h-100\">\n//           <div className=\"col-xxl-4 col-xl-5 col-lg-5 col-md-7 col-sm-9\">\n//             <div className=\"text-center my-5\">\n//               <img\n//                 src=\"/image/logo/kvartirnik_logo.png\"\n//                 alt=\"logo\"\n//                 className=\"w-100\"\n//               />\n//             </div>\n//             {error && <div className=\"alert alert-danger\">{error}</div>} {/* Отображение ошибки */}\n//             <div className=\"card shadow-lg rounded-5\">\n//               <div className=\"card-body p-5\">\n//                 <h1 className=\"fs-4 card-title fw-bold mb-4\">Вход</h1>\n//                 <form\n//                   method=\"POST\"\n//                   className={`needs-validation ${validated ? \"was-validated\" : \"\"}`}\n//                   noValidate\n//                   onSubmit={handleSubmit}\n//                 >\n//                   <div className=\"mb-3\">\n//                     <label className=\"mb-2 text-muted\" htmlFor=\"login\">\n//                       Логин\n//                     </label>\n//                     <input\n//                       id=\"login\"\n//                       type=\"text\"\n//                       className=\"form-control\"\n//                       name=\"login\"\n//                       required\n//                       autoFocus\n//                     />\n//                     <div className=\"invalid-feedback\">Логин обязателен</div>\n//                   </div>\n\n//                   <div className=\"mb-3\">\n//                     <div className=\"mb-2 w-100\">\n//                       <label className=\"text-muted\" htmlFor=\"password\">\n//                         Пароль\n//                       </label>\n//                       <Link to=\"/forgot\" className=\"float-end\">\n//                         Забыли пароль?\n//                       </Link>\n//                     </div>\n//                     <input\n//                       id=\"password\"\n//                       type=\"password\"\n//                       className=\"form-control\"\n//                       name=\"password\"\n//                       required\n//                     />\n//                     <div className=\"invalid-feedback\">Пароль обязателен</div>\n//                   </div>\n\n//                   <div className=\"d-flex align-items-center\">\n//                     <div className=\"form-check\">\n//                       <input\n//                         type=\"checkbox\"\n//                         name=\"remember\"\n//                         id=\"remember\"\n//                         className=\"form-check-input\"\n//                       />\n//                       <label htmlFor=\"remember\" className=\"form-check-label\">\n//                         Запомнить меня\n//                       </label>\n//                     </div>\n//                     <button type=\"submit\" className=\"btn btn-primary ms-auto\">\n//                       Войти\n//                     </button>\n//                   </div>\n//                 </form>\n//               </div>\n//               <div className=\"card-footer py-3 border-0\">\n//                 <div className=\"text-center\">\n//                   Нет аккаунта?{\" \"}\n//                   <Link to=\"/register\" className=\"text-dark\">\n//                     Зарегистрироваться\n//                   </Link>\n//                 </div>\n//               </div>\n//             </div>\n//           </div>\n//         </div>\n//       </div>\n//     </section>\n//   );\n// }\n\n// export default LoginPage;\n\nimport React, { useEffect, useState, useRef } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction LoginPage() {\n  _s();\n  const loginRef = useRef(null);\n  const passwordRef = useRef(null);\n  const handleSubmit = async event => {\n    event.preventDefault();\n    const form = event.currentTarget;\n    if (form.checkValidity()) {\n      const username = loginRef.current.value;\n      const password = passwordRef.current.value;\n      await auth(username, password);\n    } else {\n      event.stopPropagation();\n    }\n    setValidated(true);\n    form.classList.add(\"was-validated\");\n  };\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      id: \"login\",\n      type: \"text\",\n      className: \"form-control\",\n      ref: loginRef // Используем useRef\n      ,\n      required: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      id: \"password\",\n      type: \"password\",\n      className: \"form-control\",\n      ref: passwordRef // Используем useRef\n      ,\n      required: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      children: \"\\u0412\\u043E\\u0439\\u0442\\u0438\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 176,\n    columnNumber: 5\n  }, this);\n}\n_s(LoginPage, \"1SF25ObHuGjaL/ncrcKZGL0IFU0=\");\n_c = LoginPage;\nvar _c;\n$RefreshReg$(_c, \"LoginPage\");","map":{"version":3,"names":["React","useEffect","useState","useRef","jsxDEV","_jsxDEV","LoginPage","_s","loginRef","passwordRef","handleSubmit","event","preventDefault","form","currentTarget","checkValidity","username","current","value","password","auth","stopPropagation","setValidated","classList","add","onSubmit","children","id","type","className","ref","required","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["K:/Booking2/airbnb_booking-clone/booking/src/Components/Authorization/LoginPage.jsx"],"sourcesContent":["// import React, { useEffect, useState } from \"react\";\r\n// import { Link, useNavigate } from \"react-router-dom\";\r\n\r\n// function LoginPage() {\r\n//   const API_LOGIN = \"http://127.0.0.1:8000/api/v1/auth/token/login/\"; // API для авторизации\r\n//   const navigate = useNavigate(); // Хук для навигации\r\n//   const [validated, setValidated] = useState(false); // Состояние для валидации формы\r\n//   const [error, setError] = useState(\"\"); // Состояние для отображения ошибок\r\n\r\n//   // Если пользователь уже авторизован, перенаправляем его назад\r\n//   useEffect(() => {\r\n//     if (sessionStorage.getItem(\"auth_token\")) {\r\n//       navigate(-1);\r\n//     }\r\n//   }, [navigate]);\r\n\r\n//   // Функция для авторизации пользователя\r\n//   const auth = async (username, password) => {\r\n//     try {\r\n//       const response = await fetch(API_LOGIN, {\r\n//         method: \"POST\",\r\n//         headers: {\r\n//           \"Content-Type\": \"application/json\",\r\n//           Accept: \"*/*\",\r\n//         },\r\n//         body: JSON.stringify({ username, password }),\r\n//       });\r\n\r\n//       if (response.ok) {\r\n//         const token = await response.json();\r\n//         sessionStorage.setItem(\"auth_token\", JSON.stringify(token)); // Сохраняем токен в sessionStorage\r\n//         navigate(-1); // Перенаправляем пользователя назад после успешной авторизации\r\n//       } else {\r\n//         const errorData = await response.json();\r\n//         setError(errorData.error || \"Ошибка при авторизации\"); // Отображаем ошибку\r\n//       }\r\n//     } catch (err) {\r\n//       setError(\"Произошла ошибка при подключении к серверу\"); // Обработка ошибок сети\r\n//     }\r\n//   };\r\n\r\n//   // Обработчик отправки формы\r\n//   const handleSubmit = async (event) => {\r\n//     event.preventDefault();\r\n//     const form = event.currentTarget;\r\n\r\n//     if (form.checkValidity()) {\r\n//       const username = document.getElementById(\"login\").value;\r\n//       const password = document.getElementById(\"password\").value;\r\n//       await auth(username, password); // Вызываем функцию авторизации\r\n//     } else {\r\n//       event.stopPropagation(); // Останавливаем всплытие события, если форма невалидна\r\n//     }\r\n\r\n//     setValidated(true); // Устанавливаем состояние валидации\r\n//     form.classList.add(\"was-validated\"); // Добавляем класс для отображения ошибок\r\n//   };\r\n\r\n//   return (\r\n//     <section className=\"h-100\">\r\n//       <div className=\"container h-100\">\r\n//         <div className=\"row justify-content-sm-center h-100\">\r\n//           <div className=\"col-xxl-4 col-xl-5 col-lg-5 col-md-7 col-sm-9\">\r\n//             <div className=\"text-center my-5\">\r\n//               <img\r\n//                 src=\"/image/logo/kvartirnik_logo.png\"\r\n//                 alt=\"logo\"\r\n//                 className=\"w-100\"\r\n//               />\r\n//             </div>\r\n//             {error && <div className=\"alert alert-danger\">{error}</div>} {/* Отображение ошибки */}\r\n//             <div className=\"card shadow-lg rounded-5\">\r\n//               <div className=\"card-body p-5\">\r\n//                 <h1 className=\"fs-4 card-title fw-bold mb-4\">Вход</h1>\r\n//                 <form\r\n//                   method=\"POST\"\r\n//                   className={`needs-validation ${validated ? \"was-validated\" : \"\"}`}\r\n//                   noValidate\r\n//                   onSubmit={handleSubmit}\r\n//                 >\r\n//                   <div className=\"mb-3\">\r\n//                     <label className=\"mb-2 text-muted\" htmlFor=\"login\">\r\n//                       Логин\r\n//                     </label>\r\n//                     <input\r\n//                       id=\"login\"\r\n//                       type=\"text\"\r\n//                       className=\"form-control\"\r\n//                       name=\"login\"\r\n//                       required\r\n//                       autoFocus\r\n//                     />\r\n//                     <div className=\"invalid-feedback\">Логин обязателен</div>\r\n//                   </div>\r\n\r\n//                   <div className=\"mb-3\">\r\n//                     <div className=\"mb-2 w-100\">\r\n//                       <label className=\"text-muted\" htmlFor=\"password\">\r\n//                         Пароль\r\n//                       </label>\r\n//                       <Link to=\"/forgot\" className=\"float-end\">\r\n//                         Забыли пароль?\r\n//                       </Link>\r\n//                     </div>\r\n//                     <input\r\n//                       id=\"password\"\r\n//                       type=\"password\"\r\n//                       className=\"form-control\"\r\n//                       name=\"password\"\r\n//                       required\r\n//                     />\r\n//                     <div className=\"invalid-feedback\">Пароль обязателен</div>\r\n//                   </div>\r\n\r\n//                   <div className=\"d-flex align-items-center\">\r\n//                     <div className=\"form-check\">\r\n//                       <input\r\n//                         type=\"checkbox\"\r\n//                         name=\"remember\"\r\n//                         id=\"remember\"\r\n//                         className=\"form-check-input\"\r\n//                       />\r\n//                       <label htmlFor=\"remember\" className=\"form-check-label\">\r\n//                         Запомнить меня\r\n//                       </label>\r\n//                     </div>\r\n//                     <button type=\"submit\" className=\"btn btn-primary ms-auto\">\r\n//                       Войти\r\n//                     </button>\r\n//                   </div>\r\n//                 </form>\r\n//               </div>\r\n//               <div className=\"card-footer py-3 border-0\">\r\n//                 <div className=\"text-center\">\r\n//                   Нет аккаунта?{\" \"}\r\n//                   <Link to=\"/register\" className=\"text-dark\">\r\n//                     Зарегистрироваться\r\n//                   </Link>\r\n//                 </div>\r\n//               </div>\r\n//             </div>\r\n//           </div>\r\n//         </div>\r\n//       </div>\r\n//     </section>\r\n//   );\r\n// }\r\n\r\n// export default LoginPage;\r\n\r\n\r\n\r\nimport React, { useEffect, useState, useRef } from \"react\";\r\n\r\nfunction LoginPage() {\r\n  const loginRef = useRef(null);\r\n  const passwordRef = useRef(null);\r\n\r\n  const handleSubmit = async (event) => {\r\n    event.preventDefault();\r\n    const form = event.currentTarget;\r\n\r\n    if (form.checkValidity()) {\r\n      const username = loginRef.current.value;\r\n      const password = passwordRef.current.value;\r\n      await auth(username, password);\r\n    } else {\r\n      event.stopPropagation();\r\n    }\r\n\r\n    setValidated(true);\r\n    form.classList.add(\"was-validated\");\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <input\r\n        id=\"login\"\r\n        type=\"text\"\r\n        className=\"form-control\"\r\n        ref={loginRef} // Используем useRef\r\n        required\r\n      />\r\n      <input\r\n        id=\"password\"\r\n        type=\"password\"\r\n        className=\"form-control\"\r\n        ref={passwordRef} // Используем useRef\r\n        required\r\n      />\r\n      <button type=\"submit\">Войти</button>\r\n    </form>\r\n  );\r\n}"],"mappings":";;AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,EAAEC,MAAM,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3D,SAASC,SAASA,CAAA,EAAG;EAAAC,EAAA;EACnB,MAAMC,QAAQ,GAAGL,MAAM,CAAC,IAAI,CAAC;EAC7B,MAAMM,WAAW,GAAGN,MAAM,CAAC,IAAI,CAAC;EAEhC,MAAMO,YAAY,GAAG,MAAOC,KAAK,IAAK;IACpCA,KAAK,CAACC,cAAc,CAAC,CAAC;IACtB,MAAMC,IAAI,GAAGF,KAAK,CAACG,aAAa;IAEhC,IAAID,IAAI,CAACE,aAAa,CAAC,CAAC,EAAE;MACxB,MAAMC,QAAQ,GAAGR,QAAQ,CAACS,OAAO,CAACC,KAAK;MACvC,MAAMC,QAAQ,GAAGV,WAAW,CAACQ,OAAO,CAACC,KAAK;MAC1C,MAAME,IAAI,CAACJ,QAAQ,EAAEG,QAAQ,CAAC;IAChC,CAAC,MAAM;MACLR,KAAK,CAACU,eAAe,CAAC,CAAC;IACzB;IAEAC,YAAY,CAAC,IAAI,CAAC;IAClBT,IAAI,CAACU,SAAS,CAACC,GAAG,CAAC,eAAe,CAAC;EACrC,CAAC;EAED,oBACEnB,OAAA;IAAMoB,QAAQ,EAAEf,YAAa;IAAAgB,QAAA,gBAC3BrB,OAAA;MACEsB,EAAE,EAAC,OAAO;MACVC,IAAI,EAAC,MAAM;MACXC,SAAS,EAAC,cAAc;MACxBC,GAAG,EAAEtB,QAAS,CAAC;MAAA;MACfuB,QAAQ;IAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACT,CAAC,eACF9B,OAAA;MACEsB,EAAE,EAAC,UAAU;MACbC,IAAI,EAAC,UAAU;MACfC,SAAS,EAAC,cAAc;MACxBC,GAAG,EAAErB,WAAY,CAAC;MAAA;MAClBsB,QAAQ;IAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACT,CAAC,eACF9B,OAAA;MAAQuB,IAAI,EAAC,QAAQ;MAAAF,QAAA,EAAC;IAAK;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAChC,CAAC;AAEX;AAAC5B,EAAA,CAvCQD,SAAS;AAAA8B,EAAA,GAAT9B,SAAS;AAAA,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}